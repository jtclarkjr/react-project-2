{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/jamesclark/Downloads/demo/node_modules/reusecore/src/elements/Switch/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useToggle } from '../../hooks';\nimport SwitchStyle from './switch.style';\n\nvar Switch = function Switch(_ref) {\n  var className = _ref.className,\n      switchColor = _ref.switchColor,\n      isChecked = _ref.isChecked,\n      labelText = _ref.labelText,\n      labelPosition = _ref.labelPosition,\n      switchSize = _ref.switchSize,\n      isMaterial = _ref.isMaterial,\n      barColor = _ref.barColor,\n      onChange = _ref.onChange,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      handleOnChange = _ref.handleOnChange,\n      props = _objectWithoutProperties(_ref, [\"className\", \"switchColor\", \"isChecked\", \"labelText\", \"labelPosition\", \"switchSize\", \"isMaterial\", \"barColor\", \"onChange\", \"onFocus\", \"onBlur\", \"handleOnChange\"]);\n\n  // use toggle hooks\n  var _useToggle = useToggle(isChecked),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      toggleValue = _useToggle2[0],\n      toggleHandler = _useToggle2[1]; // Add all classs to an array\n\n\n  var addAllClasses = ['reusecore__switch']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(\"label_\".concat(labelPosition));\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  handleOnChange = function handleOnChange(event) {\n    toggleHandler();\n    onChange(!toggleValue);\n  };\n\n  var LabelField = labelText && React.createElement(\"span\", {\n    className: \"reusecore__field-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, labelText);\n  var position = labelPosition || 'top';\n  return React.createElement(SwitchStyle, _extends({\n    className: addAllClasses.join(' '),\n    switchColor: switchColor,\n    switchSize: switchSize,\n    barColor: barColor\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, position === 'left' || position === 'right' || position === 'top' ? LabelField : '', React.createElement(\"input\", {\n    checked: toggleValue,\n    onChange: handleOnChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    className: \"switch\",\n    type: \"checkbox\",\n    value: toggleValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), position === 'bottom' && LabelField));\n};\n\nSwitch.propTypes = {\n  /** ClassName of the Switch */\n  className: PropTypes.string,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** labelText of the switch field */\n  labelText: PropTypes.string,\n\n  /** switchSize control switch width and height */\n  switchSize: PropTypes.string,\n\n  /** Set label position of the switch field */\n  labelPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n\n  /** Switch toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** Set color for Switch */\n  SwitchColor: PropTypes.string,\n\n  /** Set material bar color for Switch */\n  barColor: PropTypes.string,\n\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\n  onChange: PropTypes.func\n};\nSwitch.defaultProps = {\n  isChecked: false,\n  labelPosition: 'top',\n  onBlur: function onBlur() {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {}\n};\nexport default Switch;","map":{"version":3,"sources":["/Users/jamesclark/Downloads/demo/node_modules/reusecore/src/elements/Switch/index.js"],"names":["React","PropTypes","useToggle","SwitchStyle","Switch","className","switchColor","isChecked","labelText","labelPosition","switchSize","isMaterial","barColor","onChange","onFocus","onBlur","handleOnChange","props","toggleValue","toggleHandler","addAllClasses","push","event","LabelField","position","join","propTypes","string","bool","oneOf","SwitchColor","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useToggle } from '../../hooks';\r\nimport SwitchStyle from './switch.style';\r\n\r\nconst Switch = ({\r\n  className,\r\n  switchColor,\r\n  isChecked,\r\n  labelText,\r\n  labelPosition,\r\n  switchSize,\r\n  isMaterial,\r\n  barColor,\r\n  onChange,\r\n  onFocus,\r\n  onBlur,\r\n  handleOnChange,\r\n  ...props\r\n}) => {\r\n  // use toggle hooks\r\n  const [toggleValue, toggleHandler] = useToggle(isChecked);\r\n\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__switch'];\r\n\r\n  // Add label position class\r\n  if (labelPosition) {\r\n    addAllClasses.push(`label_${labelPosition}`);\r\n  }\r\n\r\n  // isMaterial prop checking\r\n  if (isMaterial) {\r\n    addAllClasses.push('is-material');\r\n  }\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  handleOnChange = event => {\r\n    toggleHandler();\r\n    onChange(!toggleValue);\r\n  };\r\n\r\n  const LabelField = labelText && (\r\n    <span className=\"reusecore__field-label\">{labelText}</span>\r\n  );\r\n\r\n  const position = labelPosition || 'top';\r\n\r\n  return (\r\n    <SwitchStyle\r\n      className={addAllClasses.join(' ')}\r\n      switchColor={switchColor}\r\n      switchSize={switchSize}\r\n      barColor={barColor}\r\n      {...props}\r\n    >\r\n      <label>\r\n        {position === 'left' || position === 'right' || position === 'top'\r\n          ? LabelField\r\n          : ''}\r\n\r\n        <input\r\n          checked={toggleValue}\r\n          onChange={handleOnChange}\r\n          onBlur={onBlur}\r\n          onFocus={onFocus}\r\n          className=\"switch\"\r\n          type=\"checkbox\"\r\n          value={toggleValue}\r\n        />\r\n        <div>\r\n          <div />\r\n        </div>\r\n        {position === 'bottom' && LabelField}\r\n      </label>\r\n    </SwitchStyle>\r\n  );\r\n};\r\n\r\nSwitch.propTypes = {\r\n  /** ClassName of the Switch */\r\n  className: PropTypes.string,\r\n\r\n  /** Add Material effect */\r\n  isMaterial: PropTypes.bool,\r\n\r\n  /** labelText of the switch field */\r\n  labelText: PropTypes.string,\r\n\r\n  /** switchSize control switch width and height */\r\n  switchSize: PropTypes.string,\r\n\r\n  /** Set label position of the switch field */\r\n  labelPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\r\n\r\n  /** Switch toggle state based on isChecked prop */\r\n  isChecked: PropTypes.bool,\r\n\r\n  /** Set color for Switch */\r\n  SwitchColor: PropTypes.string,\r\n\r\n  /** Set material bar color for Switch */\r\n  barColor: PropTypes.string,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onBlur: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onFocus: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\r\n  onChange: PropTypes.func\r\n};\r\n\r\nSwitch.defaultProps = {\r\n  isChecked: false,\r\n  labelPosition: 'top',\r\n  onBlur: () => {},\r\n  onFocus: () => {},\r\n  onChange: () => {}\r\n};\r\n\r\nexport default Switch;\r\n"]},"metadata":{},"sourceType":"module"}